# -*- coding: utf-8 -*-
"""LogisticReg.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zwpIV9FY0aS0WSYyaUuRwfcONnwX6qaY
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

dataset = pd.read_csv('heart.csv')

dataset.insert(3,"x0",1)
#print (dataset.head())

x_data = dataset.iloc[:,[3,4,5,8,10]]
y_data = dataset['target']
#print(x_data)

#scaling
x1_max=x_data.iloc[:,1].max()
x2_max=x_data.iloc[:,2].max()
x3_max=x_data.iloc[:,3].max()
x4_max=x_data.iloc[:,4].max()
x_data.iloc[:,1]=(x_data.iloc[:,1])/(x1_max)
x_data.iloc[:,2]=(x_data.iloc[:,2])/(x2_max)
x_data.iloc[:,3]=(x_data.iloc[:,3])/(x3_max)
x_data.iloc[:,4]=(x_data.iloc[:,4])/(x4_max)
#print(x_data)

#convert to matrix
x_data=np.array(x_data)
y_data=np.array(y_data).flatten()
#print(x_data.shape)
#print(y_data.shape)

#split data train & test 80/20
trainSize=int(y_data.size*.8)
print(trainSize)
xTrain=x_data[:trainSize]
xTest=x_data[trainSize:]

yTrain=y_data[:trainSize]
yTest=y_data[trainSize:]

#print(xTrain,xTest)
#print(len(yTrain),len(yTest))

alpha=.1
ceta=np.array([0,0,0,0,0])
cost=[]
def gradientDescent():
    global ceta,mse
    for i in range(1000):
        y_pred = ( 1 / (1 + ( np.exp(-xTrain.dot(ceta)) )) )
        ceta = ceta + ((xTrain.T.dot(yTrain - y_pred)) * alpha)
        cost.append(costFunction(y_pred))
        #print("Error = ",costFunction(y_pred))
    print("Theta: ",ceta)

def costFunction(y_pred):
    lg = np.log(y_pred)
    lg1 = np.log(1-y_pred)
    ylog = yTrain * lg
    ylog1 = (1-yTrain) * lg1
    return ( -1 / len(yTrain) ) * sum( ylog + ylog1)

gradientDescent()

plt.plot(cost, label='Cost Function',c='red') 
plt.xlabel("Iterations")
plt.ylabel("Error")
plt.legend()
plt.show()

def predTest():
    c=0
    ytestpred = [1 if value >= .5 else 0 for value in ( 1 / (1 + ( np.exp(-xTest.dot(ceta)) )) )]
    print('Predicted:',ytestpred)
    print('Orignal:',yTest)
    for i in range(len(ytestpred)):
        if ytestpred[i]==yTest[i]:
            c+=1
    print("Accuarcy: ",(c/len(ytestpred))*100)

predTest()

#alpha =.1        it=1000      acc=81.96
#alpha =.01       it=1000      acc=49.18
#alpha =.001      it=10000     acc=49.18
#alpha =.0001     it=100000    acc=49.18